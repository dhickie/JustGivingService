/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package justGivingThrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2015-11-22")
public class ServiceConfig implements org.apache.thrift.TBase<ServiceConfig, ServiceConfig._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceConfig");

  private static final org.apache.thrift.protocol.TField PAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pageId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField POLLING_PERIOD_FIELD_DESC = new org.apache.thrift.protocol.TField("pollingPeriod", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RAINMETER_EXE_FIELD_DESC = new org.apache.thrift.protocol.TField("rainmeterExe", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceConfigTupleSchemeFactory());
  }

  public String pageId; // required
  public int pollingPeriod; // required
  public String rainmeterExe; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PAGE_ID((short)1, "pageId"),
    POLLING_PERIOD((short)2, "pollingPeriod"),
    RAINMETER_EXE((short)3, "rainmeterExe");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAGE_ID
          return PAGE_ID;
        case 2: // POLLING_PERIOD
          return POLLING_PERIOD;
        case 3: // RAINMETER_EXE
          return RAINMETER_EXE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __POLLINGPERIOD_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("pageId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POLLING_PERIOD, new org.apache.thrift.meta_data.FieldMetaData("pollingPeriod", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RAINMETER_EXE, new org.apache.thrift.meta_data.FieldMetaData("rainmeterExe", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceConfig.class, metaDataMap);
  }

  public ServiceConfig() {
  }

  public ServiceConfig(
    String pageId,
    int pollingPeriod,
    String rainmeterExe)
  {
    this();
    this.pageId = pageId;
    this.pollingPeriod = pollingPeriod;
    setPollingPeriodIsSet(true);
    this.rainmeterExe = rainmeterExe;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceConfig(ServiceConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPageId()) {
      this.pageId = other.pageId;
    }
    this.pollingPeriod = other.pollingPeriod;
    if (other.isSetRainmeterExe()) {
      this.rainmeterExe = other.rainmeterExe;
    }
  }

  public ServiceConfig deepCopy() {
    return new ServiceConfig(this);
  }

  @Override
  public void clear() {
    this.pageId = null;
    setPollingPeriodIsSet(false);
    this.pollingPeriod = 0;
    this.rainmeterExe = null;
  }

  public String getPageId() {
    return this.pageId;
  }

  public ServiceConfig setPageId(String pageId) {
    this.pageId = pageId;
    return this;
  }

  public void unsetPageId() {
    this.pageId = null;
  }

  /** Returns true if field pageId is set (has been assigned a value) and false otherwise */
  public boolean isSetPageId() {
    return this.pageId != null;
  }

  public void setPageIdIsSet(boolean value) {
    if (!value) {
      this.pageId = null;
    }
  }

  public int getPollingPeriod() {
    return this.pollingPeriod;
  }

  public ServiceConfig setPollingPeriod(int pollingPeriod) {
    this.pollingPeriod = pollingPeriod;
    setPollingPeriodIsSet(true);
    return this;
  }

  public void unsetPollingPeriod() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POLLINGPERIOD_ISSET_ID);
  }

  /** Returns true if field pollingPeriod is set (has been assigned a value) and false otherwise */
  public boolean isSetPollingPeriod() {
    return EncodingUtils.testBit(__isset_bitfield, __POLLINGPERIOD_ISSET_ID);
  }

  public void setPollingPeriodIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POLLINGPERIOD_ISSET_ID, value);
  }

  public String getRainmeterExe() {
    return this.rainmeterExe;
  }

  public ServiceConfig setRainmeterExe(String rainmeterExe) {
    this.rainmeterExe = rainmeterExe;
    return this;
  }

  public void unsetRainmeterExe() {
    this.rainmeterExe = null;
  }

  /** Returns true if field rainmeterExe is set (has been assigned a value) and false otherwise */
  public boolean isSetRainmeterExe() {
    return this.rainmeterExe != null;
  }

  public void setRainmeterExeIsSet(boolean value) {
    if (!value) {
      this.rainmeterExe = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PAGE_ID:
      if (value == null) {
        unsetPageId();
      } else {
        setPageId((String)value);
      }
      break;

    case POLLING_PERIOD:
      if (value == null) {
        unsetPollingPeriod();
      } else {
        setPollingPeriod((Integer)value);
      }
      break;

    case RAINMETER_EXE:
      if (value == null) {
        unsetRainmeterExe();
      } else {
        setRainmeterExe((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PAGE_ID:
      return getPageId();

    case POLLING_PERIOD:
      return getPollingPeriod();

    case RAINMETER_EXE:
      return getRainmeterExe();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PAGE_ID:
      return isSetPageId();
    case POLLING_PERIOD:
      return isSetPollingPeriod();
    case RAINMETER_EXE:
      return isSetRainmeterExe();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceConfig)
      return this.equals((ServiceConfig)that);
    return false;
  }

  public boolean equals(ServiceConfig that) {
    if (that == null)
      return false;

    boolean this_present_pageId = true && this.isSetPageId();
    boolean that_present_pageId = true && that.isSetPageId();
    if (this_present_pageId || that_present_pageId) {
      if (!(this_present_pageId && that_present_pageId))
        return false;
      if (!this.pageId.equals(that.pageId))
        return false;
    }

    boolean this_present_pollingPeriod = true;
    boolean that_present_pollingPeriod = true;
    if (this_present_pollingPeriod || that_present_pollingPeriod) {
      if (!(this_present_pollingPeriod && that_present_pollingPeriod))
        return false;
      if (this.pollingPeriod != that.pollingPeriod)
        return false;
    }

    boolean this_present_rainmeterExe = true && this.isSetRainmeterExe();
    boolean that_present_rainmeterExe = true && that.isSetRainmeterExe();
    if (this_present_rainmeterExe || that_present_rainmeterExe) {
      if (!(this_present_rainmeterExe && that_present_rainmeterExe))
        return false;
      if (!this.rainmeterExe.equals(that.rainmeterExe))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_pageId = true && (isSetPageId());
    list.add(present_pageId);
    if (present_pageId)
      list.add(pageId);

    boolean present_pollingPeriod = true;
    list.add(present_pollingPeriod);
    if (present_pollingPeriod)
      list.add(pollingPeriod);

    boolean present_rainmeterExe = true && (isSetRainmeterExe());
    list.add(present_rainmeterExe);
    if (present_rainmeterExe)
      list.add(rainmeterExe);

    return list.hashCode();
  }

  @Override
  public int compareTo(ServiceConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPageId()).compareTo(other.isSetPageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageId, other.pageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPollingPeriod()).compareTo(other.isSetPollingPeriod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPollingPeriod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pollingPeriod, other.pollingPeriod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRainmeterExe()).compareTo(other.isSetRainmeterExe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRainmeterExe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rainmeterExe, other.rainmeterExe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceConfig(");
    boolean first = true;

    sb.append("pageId:");
    if (this.pageId == null) {
      sb.append("null");
    } else {
      sb.append(this.pageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pollingPeriod:");
    sb.append(this.pollingPeriod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rainmeterExe:");
    if (this.rainmeterExe == null) {
      sb.append("null");
    } else {
      sb.append(this.rainmeterExe);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (pageId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'pageId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'pollingPeriod' because it's a primitive and you chose the non-beans generator.
    if (rainmeterExe == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'rainmeterExe' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceConfigStandardSchemeFactory implements SchemeFactory {
    public ServiceConfigStandardScheme getScheme() {
      return new ServiceConfigStandardScheme();
    }
  }

  private static class ServiceConfigStandardScheme extends StandardScheme<ServiceConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pageId = iprot.readString();
              struct.setPageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // POLLING_PERIOD
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.pollingPeriod = iprot.readI32();
              struct.setPollingPeriodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RAINMETER_EXE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rainmeterExe = iprot.readString();
              struct.setRainmeterExeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPollingPeriod()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'pollingPeriod' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.pageId != null) {
        oprot.writeFieldBegin(PAGE_ID_FIELD_DESC);
        oprot.writeString(struct.pageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(POLLING_PERIOD_FIELD_DESC);
      oprot.writeI32(struct.pollingPeriod);
      oprot.writeFieldEnd();
      if (struct.rainmeterExe != null) {
        oprot.writeFieldBegin(RAINMETER_EXE_FIELD_DESC);
        oprot.writeString(struct.rainmeterExe);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceConfigTupleSchemeFactory implements SchemeFactory {
    public ServiceConfigTupleScheme getScheme() {
      return new ServiceConfigTupleScheme();
    }
  }

  private static class ServiceConfigTupleScheme extends TupleScheme<ServiceConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.pageId);
      oprot.writeI32(struct.pollingPeriod);
      oprot.writeString(struct.rainmeterExe);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.pageId = iprot.readString();
      struct.setPageIdIsSet(true);
      struct.pollingPeriod = iprot.readI32();
      struct.setPollingPeriodIsSet(true);
      struct.rainmeterExe = iprot.readString();
      struct.setRainmeterExeIsSet(true);
    }
  }

}

