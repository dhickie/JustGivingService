/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace JustGivingThrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ServiceConfig : TBase
  {

    public string PageId { get; set; }

    public int PollingPeriod { get; set; }

    public string RainmeterExe { get; set; }

    public ServiceConfig() {
    }

    public ServiceConfig(string pageId, int pollingPeriod, string rainmeterExe) : this() {
      this.PageId = pageId;
      this.PollingPeriod = pollingPeriod;
      this.RainmeterExe = rainmeterExe;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_pageId = false;
        bool isset_pollingPeriod = false;
        bool isset_rainmeterExe = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PageId = iprot.ReadString();
                isset_pageId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                PollingPeriod = iprot.ReadI32();
                isset_pollingPeriod = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                RainmeterExe = iprot.ReadString();
                isset_rainmeterExe = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_pageId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_pollingPeriod)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_rainmeterExe)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("ServiceConfig");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "pageId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PageId);
        oprot.WriteFieldEnd();
        field.Name = "pollingPeriod";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PollingPeriod);
        oprot.WriteFieldEnd();
        field.Name = "rainmeterExe";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RainmeterExe);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("ServiceConfig(");
      __sb.Append(", PageId: ");
      __sb.Append(PageId);
      __sb.Append(", PollingPeriod: ");
      __sb.Append(PollingPeriod);
      __sb.Append(", RainmeterExe: ");
      __sb.Append(RainmeterExe);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
